//doge movement by jack11215.apfelbaum
//doge body made by unknown...
//doge jump, color randomizer, barkrespond, hunger, social, headpats and reprimands by technodos / erwynne
//doge perceptron/neuron by sarrace.flux and adapted into doge by gillian.rowley
//doge weird pointer-array-sound-thing by gillian.rowley, packfix by erwynne
//open source, have fun! warning: VERY unoptimized code.

//jump for headpats and stuff
jumpy()
    {
        vector jumpStrength = <0.0, 0.0, 4.0>;

        // Apply an upward impulse to the dog.
        llApplyImpulse(jumpStrength, FALSE);
    }

//now we set up pat amount
integer pats = 0;

//distance stuff
float radar_distance = 3;
vector target_position= <0,0,1000>;
float distance0 = 3;
float distance1 = 1;
float speed_walk = 3;
float speed_run = 5;
float sensor_timer = .01;
float event_timer = .01;
float durability = 50;
float despawn_timer = 3;
float health = 200;
float volume = 1.0;
//so he doesn't scream forever
integer complaintoggle = 0;
//fence finding cooldown
//hunger! no death but he gets "sad"
integer hunger = 5000;
//this hunger vector allows the dog to 'remember' where food was last seen. This starts at null, or all 0s, but is updated when he sees food.
vector foundFood = <0.0, 0.0, 0.0>;
//dynamic repel pathfinding baby. this shit jank as fuck. :D
vector foundFence = <0.0, 0.0, 0.0>;
//his desire to be social with other dogs, right now no negatives just positives
integer social = 2000;

//this will allow us to touch_start say in adjectives instead of numbers
string getAdjective4hunger(float value)
{
    if (value >= 4000) return "not";
    else if (value >= 3000) return "a little";
    else if (value >= 2000) return "getting";
    else return "extremely";
}

string getAdjective4social(float value2)
{
    if (value2 >= 1500) return "not";
    else if (value2 >= 1000) return "a little";
    else if (value2 >= 500) return "getting";
    else return "extremely";
}

//so it doesnt constantly say the dog condition
integer touchescount = 0;

//eye texture setup, mouth textures
string eye_freaked = "28ac2473-e894-39e5-0189-bd92a3ebb74e";
string mouth_freaked = "5f509454-a9d5-f6d6-e9d2-d0096453c0fa";
string eye_dead = "03ab70e4-7d9c-09b3-01d6-eae673a872b0";
string mouth_dead = "2ab77c09-366d-e679-6656-9e6bef1e7270";
string selected_eyes;
string selected_mouth;

//threat setup
integer there_threat = FALSE;

vector random_offset;


float   LongPress = 0.5;

integer SelectedSoundSet;
//float   DefaultSoundInterval = 10.0;
integer SelectedListLength;
integer count;
integer DefaultProbability = 40;
integer CurrentProbability;
float   ReductionMultiplier = 0.9; 

//contented snuffles
list contented = ["dog1_content_1", "dog1_content_2", "dog1_content_3", "dog2_content_1", "dog2_content_3"];

//recognition grunts
list grunt = ["dog_grunt_1", "dog_grunt_2", "dog_grunt_3"];

//barks to select on rez
list sounds1 = ["dog1_bark_3", "dog1_bark_5"];
list sounds2 = ["dog2_bark_1", "dog2_bark_4"];
list sounds3 = ["dog3_bark_1", "dog3_bark_4"];
list sounds4 = ["dog4_bark_1", "dog4_bark_4", "dog4_bark_5"];
list sounds5 = ["dog5_bark_1", "dog5_bark_2", "dog5_bark_3", "dog5_bark_4", "dog5_bark_5"];
list sounds6 = ["dog6_bark_1", "dog6_bark_3", "dog6_bark_5"];
list SoundSet;

transposeList(list Selection)
{
    SoundSet = SoundSet + Selection;
}

selectSoundSet()
{
    llOwnerSay("Initialising...");
    integer n;
    
    SelectedSoundSet = getRandomInt(1, 6);
    if(SelectedSoundSet == 1) transposeList(sounds1);
    else if(SelectedSoundSet == 2) transposeList(sounds2);
    else if(SelectedSoundSet == 3) transposeList(sounds3);
    else if(SelectedSoundSet == 4) transposeList(sounds4);
    else if(SelectedSoundSet == 5) transposeList(sounds5);
    else if(SelectedSoundSet == 6) transposeList(sounds6);    
    
    SelectedListLength = llGetListLength(SoundSet);
    for(n = 0; n < SelectedListLength; n++)
    {
        string SoundFile = llList2String(SoundSet,n);
        llPreloadSound(SoundFile);
    }
    llOwnerSay("SoundSet " + (string)SelectedSoundSet + " Pre-loaded...");
}

playRandomSound()
{
    integer PlaySound = getRandomInt(0, (SelectedListLength -1));
    string SoundChoice = llList2String(SoundSet,PlaySound);
    
    
    
    llPlaySound((string)SoundChoice, 1.0);
            count = 0;
}

onShortPress()
{
    
    
    CurrentProbability = llRound(CurrentProbability * ReductionMultiplier);
    //llSetText("Prob: " + (string)CurrentProbability, <0.0, 0.85, 0.0>, 1.0);
}

onLongPress()
{
    
    CurrentProbability++;
    //llSetText("Prob: " + (string)CurrentProbability, <0.0, 0.85, 0.0>, 1.0);
}

 
integer getRandomInt(integer MIN, integer MAX)
{
    
    return MIN + (integer)(llFrand(MAX - MIN + 1));
}

//for food! this will make the dog 'attracted' to these things in his eyesight when hungry!
list namesToCheck = ["Cheese Wedge", "Russianblack Bread"];
//for fences, specifically, the ones around your property, and NOT your house walls. unless you live in a massive mansion
list fenceCheck = ["Wood Fence"];

list threat;

list sounds_died 
=[
"20611b8f-9106-ab2f-701f-8256384cf36a"
];

list sounds_hurt 
=[
"8c36fb0f-665d-c196-2306-9a5b91851fa3"
];

list sounds 
=[
"bd6d7909-5515-9aed-a984-8cff45a23c99",
"b7585f06-c62b-0de8-9201-4fa231115d78",
"93435e94-b763-1f2f-0c2e-2c729b7ab689"
];

list mouth_texture 
=[
"bc79455f-ced8-ee29-3ee0-02522f8181b8",
"8bb7c9e7-c6ef-fafe-8061-ed60ece2db9e",
"a73fa223-b74e-ba06-993a-0275fc7415ce",
"fda408e1-5340-3f4d-1201-df1724aa4e11",
"a6162df6-39f1-eb18-a6a0-ac0b411b79b9",
"59bd2be6-3489-608c-e1dd-a3eeb9986f34",
"32001ee7-14b0-3390-3c82-128fa297033c",
"1f682eef-a63e-e398-f514-35a918a6a21e",
"707b200d-399b-2d2c-4012-51bbb253f84a"
];

list eye_texture 
=[
"564e6df6-fa22-7f22-96c8-d4699f786dc8",
"18e6f7c8-2f21-b73b-0048-f7f0a427794a",
"acfc8e88-121d-93df-14af-386c89529519",
"c2e0fa78-77a6-f4f0-93fa-cfd0ba17bdc2",
"58c9b8ff-0182-898f-331f-507327bf12d4",
"b6551c4d-d9b9-ee75-e22b-eea17b3dbc49",
"a7c6a679-bec7-15c1-7d96-0a9b94cccea4"
];

integer body;
integer hole;
integer backleg1;
integer backleg0;
integer frontleg1;
integer frontleg0;
integer earsL1;
integer earsL0;
integer earsR1;
integer earsR0;
integer mouth;
integer eye;
integer head1;
integer head0;
integer nose;
integer head2;


//stops people from sitting on the dogo for whatever reason
unsit_all()
{
    integer objectPrimCount = llGetObjectPrimCount(llGetKey());
    integer currentLinkNumber = llGetNumberOfPrims();
    for (; objectPrimCount < currentLinkNumber; --currentLinkNumber)
    {
    llUnSit(llGetLinkKey(currentLinkNumber));
    }    
}
 

integer getLinkNum(string primName)
{
integer primCount = llGetNumberOfPrims();
integer i;
for (i=0; i<primCount+1;i++){  
if (llGetLinkName(i)==primName) return i;
} 
return FALSE;
}

findlink() 
{
body = getLinkNum("body");
hole = getLinkNum("hole");
backleg1 = getLinkNum("backleg1");
backleg0 = getLinkNum("backleg0");
frontleg1 = getLinkNum("frontleg1");
frontleg0 = getLinkNum("frontleg0");
earsL1 = getLinkNum("earsL1");
earsL0 = getLinkNum("earsL0");
earsR1 = getLinkNum("earsR1");
earsR0 = getLinkNum("earsR0");
eye = getLinkNum("eye");
nose = getLinkNum("nose");
mouth = getLinkNum("mouth");
head2 = getLinkNum("head2");
head1 = getLinkNum("head1");
head0 = getLinkNum("head0");
}

Dead()
{
llStopLookAt(); 
string random0 = llList2String(sounds_died,llFloor(llFrand(llGetListLength(sounds_died)))); 
llStopSound(); 
llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,0,eye_dead, <1.0, 1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 0, PRIM_ALPHA_MODE_MASK, 100]); 
llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,2,eye_dead, <1,-1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 2, PRIM_ALPHA_MODE_MASK, 100]);  
llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,mouth_dead, <1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);  
llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"stop"]);
llSetStatus( STATUS_ROTATE_X | STATUS_ROTATE_Y,TRUE);
llTriggerSound(random0,volume);
llSleep(despawn_timer);  
llLinkParticleSystem(LINK_ALL_OTHERS,[
PSYS_PART_FLAGS,           
PSYS_PART_FOLLOW_VELOCITY_MASK| 
PSYS_PART_INTERP_COLOR_MASK|   
PSYS_PART_INTERP_SCALE_MASK|   
PSYS_PART_EMISSIVE_MASK,       
PSYS_SRC_PATTERN,         
PSYS_SRC_PATTERN_ANGLE_CONE,      
PSYS_PART_START_COLOR, llGetColor(ALL_SIDES),   
PSYS_PART_END_COLOR,llGetColor(ALL_SIDES),   
PSYS_PART_START_GLOW,0,     
PSYS_PART_END_GLOW,0,     
PSYS_PART_START_ALPHA, 1,      
PSYS_PART_END_ALPHA,1,     
PSYS_PART_START_SCALE, <0.5,0.5,0>, 
PSYS_PART_END_SCALE,   <0,0,0>,
PSYS_SRC_BURST_RADIUS, 0,     
PSYS_PART_MAX_AGE,.5,        
PSYS_SRC_MAX_AGE,.5,          
PSYS_SRC_BURST_RATE,100, 
PSYS_SRC_BURST_PART_COUNT,2, 
PSYS_SRC_TEXTURE, "d937c2a8-950d-54a5-9106-592e5044a9fa", 
PSYS_SRC_OMEGA, <0,0,0>,       
PSYS_SRC_BURST_SPEED_MIN,5,   
PSYS_SRC_BURST_SPEED_MAX,5,    
PSYS_SRC_ACCEL, <0,0,-10>,       
PSYS_SRC_ANGLE_BEGIN, 1,     
PSYS_SRC_ANGLE_END, 2       
] );
llSleep(0.05);
llLinkParticleSystem(LINK_ALL_OTHERS,[] );
llDie(); 
}


//our first move_to, which accepts keys
move_to(key avatar)
{
    //if hunger and social is below 0, we can remove 1 from it. if it's below 0, we don't remove 1 from it
    if (hunger > 0)
    {
        hunger -= 1;
        if (hunger == 3)
        {
    // to do: change to the list
        llPlaySound("dog6_complain_1", 1.0);
        }
    }
    if (social > 0)
    {
        social-=1;
    }
    list crux = llGetObjectDetails(avatar, ([OBJECT_POS, OBJECT_VELOCITY])); 
    float dist=llVecDist(llList2Vector(crux,0)+random_offset,llGetPos()); 
    if(dist>distance0)
    {  
    llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"walk"]);
    llSetVelocity(llVecNorm((llList2Vector(crux,0)+random_offset)-llGetPos())*speed_walk,0);   
    llRotLookAt(llRotBetween(<1,0,0>,llVecNorm((llList2Vector(crux,0)+random_offset)+(llList2Vector(crux,1)*0)-llGetPos()+(llGetVel()*0.2))),0.2,1.0);
    }
    else
    {
    float dist=llVecDist(llList2Vector(crux,0)+random_offset,llGetPos()); 
    if(dist>distance1)
    {
    llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"stop"]);
    llRotLookAt(llRotBetween(<1,0,0>,llVecNorm((llList2Vector(crux,0)+random_offset)+(llList2Vector(crux,1)*0)-llGetPos()+(llGetVel()*0.2))),0.2,1.0);
    }
    else
    {
    llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"walk"]);
    llSetVelocity(llVecNorm((llList2Vector(crux,0)+random_offset)-llGetPos())*-speed_walk,0);  
    llRotLookAt(llRotBetween(<1,0,0>,llVecNorm((llList2Vector(crux,0)+random_offset)+(llList2Vector(crux,1)*0)-llGetPos()+(llGetVel()*0.2))),0.2,1.0);
    }
  }
} 

//our second move_to, which accepts vector positions. this is for objects, like cheese.
move_to_pos(vector position)
{
    if (hunger <= 3 && complaintoggle = 0)
    {
         llPlaySound("dog6_complain_1", 1.0);
         complaintoggle = 1;
    }
    
    float dist = llVecDist(position, llGetPos());  // removed random_offset

    float distance0 = 0.5; 

    float distance1 = 0;

    if(dist > distance0)
    {  
        llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"walk"]);
        llSetVelocity(llVecNorm((position)-llGetPos())*speed_walk,0);  // removed random_offset  
        llRotLookAt(llRotBetween(<1,0,0>,llVecNorm((position)-llGetPos()+(llGetVel()*0.2))),0.2,1.0);  // removed random_offset
    }
    else
    {
        if(dist > distance1)
        {
            llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"stop"]);
            llRotLookAt(llRotBetween(<1,0,0>,llVecNorm((position)-llGetPos()+(llGetVel()*0.2))),0.2,1.0);  // removed random_offset
        }
        else
        {
            llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"walk"]);
            llSetVelocity(llVecNorm((position)-llGetPos())*-speed_walk,0);  // removed random_offset
            llRotLookAt(llRotBetween(<1,0,0>,llVecNorm((position)-llGetPos()+(llGetVel()*0.2))),0.2,1.0);  // removed random_offset
        }
    }
}

//our third, which is a repel version
repel_from_pos(vector position)
{
    
    vector currentPos = llGetPos();
    float dist = llVecDist(position, currentPos);

    vector direction = llVecNorm(position - currentPos); // Direction towards the object
    vector awayDirection = -direction; // Reverse the direction to move away from the object

    llSetLinkPrimitiveParamsFast(body, [PRIM_DESC, "walk"]);
    llSetVelocity(awayDirection * speed_walk, 0);
    llRotLookAt(llRotBetween(<1, 0, 0>, awayDirection + (llGetVel() * 0.2)), 0.2, 1.0);
}

Run(key avatar)
{
    list crux = llGetObjectDetails(avatar, ([OBJECT_POS, OBJECT_VELOCITY]));
    float dist=llVecDist(llList2Vector(crux,0),llGetPos());     
    dist=llVecDist(llList2Vector(crux,0),llGetPos()); 
    if(dist>radar_distance)
    {
    llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"stop"]);
    llRotLookAt(llRotBetween(<-1,0,0>,llVecNorm(llList2Vector(crux,0)+(llList2Vector(crux,1)*0)-llGetPos()+(llGetVel()*0.2))),0.2,1.0);
    }
    else
    {
    llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"walk"]);
    llSetVelocity(llVecNorm(llList2Vector(crux,0)-llGetPos())*-speed_run,0);  
    llRotLookAt(llRotBetween(<-1,0,0>,llVecNorm(llList2Vector(crux,0)-(llList2Vector(crux,1)*0)-llGetPos()+(llGetVel()*0.2))),0.2,1.0);
    }
}

go_home()
{
    float dist=llVecDist((vector)llGetObjectDesc()+random_offset,llGetPos());
    if(dist>1.5)
    {
    llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"walk"]);
    llSetVelocity(llVecNorm(((vector)llGetObjectDesc()+random_offset)-llGetPos())*speed_walk,0);  
    llRotLookAt(llRotBetween(<1,0,0>,llVecNorm(((vector)llGetObjectDesc()+random_offset)+(llGetVel()*0)-llGetPos()+(llGetVel()*0.2))),0.2,1.0);
    }
    else
    {
    llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"stop"]);
    }
}

integer channel = -122313;
//for supported bark gestures
integer barksupp = 841712;
//headpat receiver channel received from head
integer headpat = 937;
//train dog channel received from legs
integer reprimand = 5149;
    
    
//glitchy ass startup event
startup()
{
     //define how many packs in llfRand - 6 is the amount of packs from Wobbledogs.
//we set the textures
    string random0 = llList2String(mouth_texture,llFloor(llFrand(llGetListLength(mouth_texture))));
    string random1 = llList2String(eye_texture,llFloor(llFrand(llGetListLength(eye_texture)))); 
    selected_eyes = random1;
    selected_mouth = random0; 
    llStopSound();
    llListen(channel,"","","");
    //listen for barks from people (public vers)
    llListen(barksupp,"","","");
    //listen for headpats
    llListen(headpat,"","","");
    llListen(reprimand,"","","");
    llSetTimerEvent(event_timer);
    llSetObjectDesc((string)llGetPos());
    llSetStatus(STATUS_DIE_AT_EDGE,TRUE);
    llSensorRepeat("","",ACTIVE | PASSIVE | AGENT,radar_distance,PI,sensor_timer);
    llSetLinkPrimitiveParamsFast(body,[PRIM_DESC,"stop"]);
    llSetStatus( STATUS_ROTATE_X | STATUS_ROTATE_Y, TRUE);
    llLinkParticleSystem(LINK_ALL_OTHERS,[] );
    llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,selected_mouth,<1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);  
    llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,0,selected_eyes, <1.0, 1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 0, PRIM_ALPHA_MODE_MASK, 100]); 
    llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,2,selected_eyes, <1,-1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 2, PRIM_ALPHA_MODE_MASK, 100]);
    //if you want to turn collisions on or off I guess you can change this to true
    llSetLinkPrimitiveParamsFast(2, [PRIM_PHANTOM, FALSE]);
}
float timelimit = 1000;
float counter;
random_sound()
{  
     if(counter>timelimit)
     { 
    //playRandomSound();
     llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,llList2String(mouth_texture,llFloor(llFrand(llGetListLength(mouth_texture)))),
      <1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);
      llSleep(0.02);
     llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,llList2String(mouth_texture,llFloor(llFrand(llGetListLength(mouth_texture)))),
      <1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);
      llSleep(0.02);
     llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,llList2String(mouth_texture,llFloor(llFrand(llGetListLength(mouth_texture)))),
      <1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);   
      llSleep(0.02);
     llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,llList2String(mouth_texture,llFloor(llFrand(llGetListLength(mouth_texture)))),
      <1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);
      llSleep(0.02);
     llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,llList2String(mouth_texture,llFloor(llFrand(llGetListLength(mouth_texture)))),
      <1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);
      llSleep(0.02);
       llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,selected_mouth,<1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);  
     counter = 0;  
     }
     else
     {
     counter = counter + 1;     
     }       
}
string blink_eye = "2ce81d41-5069-72a5-af68-02d80391e98e";
float timelimt = 50;
float counte;
    

//fast
blink()
{  
     if(counte>timelimt)
     {
       llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,0,blink_eye, <1.0, 1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 0, PRIM_ALPHA_MODE_MASK, 100]); 
       llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,2,blink_eye, <1,-1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 2, PRIM_ALPHA_MODE_MASK, 100]);  
      llSleep(0.1);
       llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,0,selected_eyes, <1.0, 1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 0, PRIM_ALPHA_MODE_MASK, 100]); 
       llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,2,selected_eyes, <1,-1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 2, PRIM_ALPHA_MODE_MASK, 100]);  
     counte = 0;  
     }
     else
     {
     counte = counte + 1;     
     }       
}
float timelim = 200;
float coune;
forget_threat()
{  
   if(there_threat == TRUE) 
   {  
      if(coune>timelim)
      {
      threat = [];    
      there_threat = FALSE;
      coune = 0;  
      }
      else
      {
      coune = coune + 1;     
      } 
   }
}
float timeli = 60;
float coun;
generate_vector()
{  
    if(coun>timeli)
    {
    float A = llFrand(5) + llFrand(-5);
    float B = llFrand(5) + llFrand(-5);
    random_offset = <A,B,0>;
    coun = 0;  
    }
    else
    {
    coun = coun + 1;     
    } 
}
default
{
    changed(integer change)
    {
      if (change & CHANGED_LINK)
      {  
      llResetScript();
      }

    }
    on_rez(integer start_param) 
    {
       //the parts to change color which occurs after startup();
    list HeadnLegs = [5, 6, 7, 8, 13, 14, 15, 16, 18];
    list BodynTail = [2, 3];
    vector color;
    integer max;
    integer j;
        color=<llFrand(1),llFrand(1),llFrand(1)>;
        max = llGetListLength(HeadnLegs);
        for(j = 0; j < max; j++)
        {
            llSetLinkPrimitiveParamsFast(llList2Integer(HeadnLegs,j),[PRIM_COLOR,ALL_SIDES,color,1.0]);
        }
        color=<llFrand(1),llFrand(1),llFrand(1)>;
        max = llGetListLength(BodynTail);
        for(j = 0; j < max; j++)
        {
            llSetLinkPrimitiveParamsFast(llList2Integer(BodynTail,j),[PRIM_COLOR,ALL_SIDES,color,1.0]);
        }
       llResetScript(); 
    }
    state_entry() 
    { 
        
        selectSoundSet();
        
       // llPreloadSound("DebugBeep");
        CurrentProbability = DefaultProbability;
        //llSetText("Prob: " + (string)CurrentProbability, <0.0, 0.85, 0.0>, 1.0);
     llOwnerSay("State entry function called.");
    findlink();
    startup();
    }
touch_start(integer touched)
{
    integer detectedLinkNum = llDetectedLinkNumber(0);
    if (detectedLinkNum == getLinkNum("body"))
    { 
        touchescount++;
    }
    if (touchescount == 3)
    {
        llSay(0, "The dog is feeling...");
        llSay(0, getAdjective4hunger(hunger) + " hungry...");
        llSay(0, "...and " + getAdjective4social(social) + " lonely...!");
        touchescount = 0;
    }
}

    touch_end(integer touched)
    {
    }
    
    sensor(integer num_detected)
    { 
      string detectedName = llDetectedName(0);
      if (~llListFindList(fenceCheck, [detectedName]))
       {
            foundFence = llDetectedPos(0);
           repel_from_pos(foundFence);
    //cooldown?
        }
      
       if (~llListFindList(threat,[(string)llDetectedKey(0)])) 
       {
       llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,mouth_freaked, <1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);     
       llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,0,eye_freaked, <1.0, 1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 0, PRIM_ALPHA_MODE_MASK, 100]); 
       llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,2,eye_freaked, <1,-1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 2, PRIM_ALPHA_MODE_MASK, 100]);  
       Run(llDetectedKey(0));
       }
// for treats now - and one for friends
    string contentnoise = llList2String(contented, (integer)llFrand(llGetListLength(contented)));
     if (~llListFindList(namesToCheck, [detectedName])) 
        {
        foundFood = llDetectedPos(0);
            //if foundFood exists/he saw a food once in his lifetime...
            if(hunger <= 0 && foundFood != <0.0, 0.0, 0.0>)
        {
    //food attention debug
    //llOwnerSay("moving to food");
        move_to_pos(foundFood);
        }
            if(detectedName == "dog who likes cheese w complain" && social < 400)
            {
            social = social + 200;
            jumpy();
            llSleep(0.8);
            move_to(llDetectedKey(0));
    // to do: make it from the list
            llPlaySound(contentnoise, 1.0);
            }
            else
            {
                // he zoom
            move_to(llDetectedKey(0));
            }
        }
//he moves to you / avatar otherwise unless he is hungy
       else
       {
    if(hunger > 0)
    {
         //attention mechanism debug
        //llOwnerSay("Moving to target, current hunger: " + (string)hunger);
        llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,selected_mouth,<1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);  
        llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,0,selected_eyes, <1.0, 1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 0, PRIM_ALPHA_MODE_MASK, 100]); 
        llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,2,selected_eyes, <1,-1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 2, PRIM_ALPHA_MODE_MASK, 100]);    
        move_to(llDetectedKey(0));
    }
    if(hunger <= 0 && foundFood != <0.0, 0.0, 0.0>)
    {
    //attention mechanism debug
        //llOwnerSay("Ignoring target, moving to food because hunger is: " + (string)hunger);
        move_to_pos(foundFood);
     //clear the memory
     vector foundFood = <0.0, 0.0, 0.0>;
    }
  }
}
listen(integer c, string n, key i, string m)
{

    vector pos = llList2Vector(llGetObjectDetails(i, [OBJECT_POS]), 0);
    float dist = llVecDist(pos, llGetPos());
    string contentnoise = llList2String(contented, (integer)llFrand(llGetListLength(contented)));
    
    if (c == 841712 && dist < 5)
    {
        llSleep(0.4);
        playRandomSound();
    }
    
    else if(c == 5149)
      {
        if(CurrentProbability <= 20)
        {
           llSay(0, "The dog learned to bark less!");
}
       onShortPress();   
      }

    else if(c == 937 && dist < 3)
    {
            //we start at zero, we add one for each detected click
        pats = pats + 1;
        if(pats == 3)
        {
         onLongPress();
          if(CurrentProbability <= 70 && pats == 3)
          {
           llSay(0, "The dog learned to bark more!");
          }
    //blink cutely
    llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,0,blink_eye, <1.0, 1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 0, PRIM_ALPHA_MODE_MASK, 100]); 
       llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,2,blink_eye, <1,-1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 2, PRIM_ALPHA_MODE_MASK, 100]);  
        //later on, I'd like this jumpy to be a random amount between 2 and 7 jumpstrength impulse upwards.
        llSleep(0.6);
        jumpy();
        llSleep(0.8);
        jumpy();
        //select a random sound from the contented list to make a happy sound
        llPlaySound(contentnoise, 1.0);
    //open your eyes
     llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,0,selected_eyes, <1.0, 1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 0, PRIM_ALPHA_MODE_MASK, 100]); 
       llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,2,selected_eyes, <1,-1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 2, PRIM_ALPHA_MODE_MASK, 100]); 
        pats = 0;
        }
    else if(llGetOwnerKey(i) == llGetOwner() && dist < 15)
    {
        if(dist > 10)
        {  
            // no
        }
        else
        {
            list items = llParseString2List(m, ["|"], []);
            if(llList2String(items, 0) == "thisguyhurtme")
            { 
                if (!~llListFindList(threat, [llList2String(items, 1)]))
                {
                    threat += (list)llList2String(items, 1); 
                    there_threat = TRUE;
                }
            }
        }
    }
}
}
    collision_start(integer times)
    {
    string detectedName = llDetectedName(0);
        if (hunger == 0 && detectedName == "Cheese Wedge" || detectedName == "Russianblack Bread" )
        {
        llPlaySound("cromch", 0.8);
        hunger = 5000;
        vector foundFood = <0.0, 0.0, 0.0>;
        }
        float damage = llVecMag(llDetectedVel(0))+llVecMag(llGetVel());   
        if(damage > durability)
        {   
        string random0 = llList2String(sounds_hurt,llFloor(llFrand(llGetListLength(sounds_hurt))));    
        llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,mouth_freaked, <1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);     
        llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,0,eye_freaked, <1, 1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 0, PRIM_ALPHA_MODE_MASK, 100]); 
        llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,2,eye_freaked, <1,-1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 2, PRIM_ALPHA_MODE_MASK, 100]);
        string ree = llGetOwnerKey(llDetectedKey(0));
        llTriggerSound(random0,volume); 
        health = health - damage;
        if (!~llListFindList(threat, [ree]))
        {
        threat += (list)((string)ree);
        llRegionSay(channel,"thisguyhurtme"+"|"+ree); 
        there_threat = TRUE;
        }
      }
    }
    land_collision_start(vector where)
    {
        float damage = llVecMag(llDetectedVel(0))+llVecMag(llGetVel());   
        if(damage > durability)
        {
        string random0 = llList2String(sounds_hurt,llFloor(llFrand(llGetListLength(sounds_hurt))));    
        llSetLinkPrimitiveParamsFast(mouth,[ PRIM_TEXTURE,4,mouth_freaked, <1.0, 1.0, 0.0>, ZERO_VECTOR,90* DEG_TO_RAD,PRIM_ALPHA_MODE,4, PRIM_ALPHA_MODE_MASK, 100]);     
        llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,0,eye_freaked, <1, 1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 0, PRIM_ALPHA_MODE_MASK, 100]); 
        llSetLinkPrimitiveParamsFast(eye,[ PRIM_TEXTURE,2,eye_freaked, <1,-1.0, 0.0>, ZERO_VECTOR, 0,PRIM_ALPHA_MODE, 2, PRIM_ALPHA_MODE_MASK, 100]);
        llTriggerSound(random0,volume); 
        health = health - damage;
        }
    }
    no_sensor()
    {      
    go_home();
    }
    timer()
    { 
    ++count;
      unsit_all();
      integer TriggerProbability = getRandomInt(0, 100);
       // llOwnerSay((string)TriggerProbability);
    if(count >= 100)
    {
        if(TriggerProbability <= CurrentProbability)
        {
            playRandomSound();
    //debug
            //llOwnerSay("Yes");
        }
        if(TriggerProbability >= CurrentProbability)
        {
           // playRandomSound();
        //debug
            //llOwnerSay("No");
            count = 0;
        }
    }
      rotation look=llGetRot()*llRotBetween(<0,0,1>*llGetRot(),(llGetPos()+target_position)-llGetPos());
      llRotLookAt(look,0.1,0.01);
      blink(); 
      generate_vector(); 
      random_sound(); 
      forget_threat();
      if(health<=1)
      {
      Dead();
      }
   }
}